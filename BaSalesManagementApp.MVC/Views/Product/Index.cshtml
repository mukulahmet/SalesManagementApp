@model IPagedList<ProductListVM>
@using BaSalesManagementApp.MVC.Models.ProductVMs
@using Microsoft.Extensions.Localization
@using X.PagedList.Mvc.Common
@using X.PagedList.Mvc.Core
@using X.PagedList
@using X.PagedList.Mvc.Core.Common
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<Resource> localizer

@{
    ViewData["Title"] = localizer["Index"];
}

<div class="content-wrapper">
    <div class="container-xxl flex-grow-1 container-p-y">
       @*  <h4 class="py-3 mb-4"><span class="text-muted fw-light">@localizer["Product"]</span>List</h4> *@
        <h4 class="py-3 mb-4">
            <span class="text-muted fw-light">@localizer["Product"] /</span>
            @localizer["List"]
        </h4>
        <p>
            <a asp-action="Create" class="btn btn-primary">@localizer["Create_New"]</a>
        </p>
        <div class="card">
            <div class="table-responsive text-nowrap">
                <table class="table">
                    <thead>
                        <tr>
                            <th>@localizer["Product_Name"]</th>
                            <th>@localizer["Price"]</th>
                            <th>@localizer["CategoryName"]</th>
                            <th>@localizer["CompanyName"]</th>
                            <th class="text-end">@localizer["Actions"]</th>
                        </tr>
                    </thead>
                    <tbody class="table-border-bottom-0">
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td class="fw-medium">@item.Name</td>
                                <td class="fw-medium">@item.Price</td>
                                <td class="fw-medium">@item.CategoryName</td>
                                <td class="fw-medium">@item.CompanyName</td>
                                <td class="text-end">
                                    <div class="dropdown">
                                        <button type="button" class="btn p-0 dropdown-toggle hide-arrow" data-bs-toggle="dropdown" style="margin-right: 28px;">
                                            <i class="bx bx-dots-vertical-rounded"></i>
                                        </button>
                                        <div class="dropdown-menu">
                                            <a asp-action="Details" asp-route-productId="@item.Id" class="dropdown-item"><i class="bx bx-info-circle me-1"></i>@localizer["Details"]</a>
                                            <a asp-action="Update" asp-route-productId="@item.Id" class="dropdown-item"><i class="bx bx-edit-alt me-1"></i>@localizer["Update"]</a>
                                            <a href="javascript:;" class="dropdown-item" data-bs-toggle="modal" data-bs-target="#deleteModal" data-product-id="@item.Id"><i class="bx bx-trash me-1"></i>@localizer["Delete"]</a>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="d-flex justify-content-center mt-3">
                @Html.PagedListPager(Model, page => Url.Action("Index", new { page }), new PagedListRenderOptions
           {
               Display = PagedListDisplayMode.Always,
               UlElementClasses = new[] { "pagination", "justify-content-center" },
               LiElementClasses = new[] { "page-item" },
               PageClasses = new[] { "page-link" },
               LinkToPreviousPageFormat = @localizer["Previous"],
               LinkToNextPageFormat = @localizer["Next"],
               LinkToFirstPageFormat = @localizer["First"],
               LinkToLastPageFormat = @localizer["Last"],
               ContainerDivClasses = new[] { "d-flex", "justify-content-center" }
           })
            </div>
        </div>
    </div>
</div>
<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">@localizer["DELETE_CONFIRM_TITLE_PRODUCT"]</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="deleteModalMessage">@localizer["DELETE_CONFIRM_PRODUCT"]</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@localizer["CANCEL_PRODUCT"]</button>
                <a id="confirmDeleteButton" href="#" class="btn btn-danger">@localizer["DELETE_PRODUCT"]</a>
                <a id="confirmPassiveButton" href="#" class="btn btn-warning" style="display:none;">@localizer["PASSIVE_PRODUCT"]</a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Razor'dan yerelleştirilmiş stringleri URL encoded olarak JavaScript değişkenleri olarak tanımlıyoruz
        var productCannotDeleteMessage = decodeURIComponent("@Uri.EscapeDataString(localizer["PRODUCT_CANNOT_DELETE_IS_IN_ORDER"])");
        var deleteConfirmMessage = decodeURIComponent("@Uri.EscapeDataString(localizer["DELETE_CONFIRM_PRODUCT"])");

        document.addEventListener('DOMContentLoaded', function () {
            var deleteModal = document.getElementById('deleteModal');
            deleteModal.addEventListener('show.bs.modal', async function (event) {
                var button = event.relatedTarget;
                var productId = button.getAttribute('data-product-id');
                var confirmDeleteButton = deleteModal.querySelector('#confirmDeleteButton');
                var confirmPassiveButton = deleteModal.querySelector('#confirmPassiveButton');
                var deleteModalMessage = deleteModal.querySelector('#deleteModalMessage');

                // Ürünün siparişe bağlı olup olmadığını kontrol et
                const response = await fetch('/Product/CheckProductInOrder?productId=' + productId);
                const data = await response.json();

                if (data.isInOrder) {
                    deleteModalMessage.textContent = productCannotDeleteMessage;
                    confirmDeleteButton.style.display = 'none';
                    confirmPassiveButton.style.display = 'inline-block';
                    confirmPassiveButton.href = '/Product/Delete?productId=' + productId;
                } else {
                    deleteModalMessage.textContent = deleteConfirmMessage;
                    confirmDeleteButton.style.display = 'inline-block';
                    confirmPassiveButton.style.display = 'none';
                    confirmDeleteButton.href = '/Product/Delete?productId=' + productId;
                }
            });
        });
    </script>
}

